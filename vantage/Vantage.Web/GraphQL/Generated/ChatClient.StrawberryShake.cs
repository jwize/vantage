// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public static partial class ChatClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Vantage.Web.State.ChatClientStoreAccessor> AddChatClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Vantage.Web.State.ChatClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.GetUsersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.GetCommentsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.SendMessageMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.OnAddedCommentSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.GetReplacementLinksQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.AddReplacementMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.RemoveReplacementLinkMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.OnReplacementLinkCreatedSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.OnReplacementLinkRemovedSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.ChatClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.IChatClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Vantage.Web.State.ChatClientStoreAccessor>("ChatClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(services, sp =>
            {
                var sessionPool = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.ISessionPool>(parentServices);
                return new global::StrawberryShake.Transport.WebSockets.WebSocketConnection(async ct => await sessionPool.CreateAsync("ChatClient", ct));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("ChatClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.UserEntity, global::Vantage.Web.GetUsers_User_User>, global::Vantage.Web.State.GetUsers_User_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.CommentEntity, global::Vantage.Web.GetComments_Comment_Comment>, global::Vantage.Web.State.GetComments_Comment_CommentFromCommentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.UserEntity, global::Vantage.Web.GetComments_Comment_User_User>, global::Vantage.Web.State.GetComments_Comment_User_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.CommentEntity, global::Vantage.Web.SendMessage_AddComment_Comment_Comment>, global::Vantage.Web.State.SendMessage_AddComment_Comment_CommentFromCommentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.CommentEntity, global::Vantage.Web.OnAddedComment_Created_Comment>, global::Vantage.Web.State.OnAddedComment_Created_CommentFromCommentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.UserEntity, global::Vantage.Web.OnAddedComment_Created_User_User>, global::Vantage.Web.State.OnAddedComment_Created_User_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, global::Vantage.Web.GetReplacementLinks_ReplacementLink_ReplacementLink>, global::Vantage.Web.State.GetReplacementLinks_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, global::Vantage.Web.AddReplacement_AddReplacementLink_ReplacementLink_ReplacementLink>, global::Vantage.Web.State.AddReplacement_AddReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, global::Vantage.Web.RemoveReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLink>, global::Vantage.Web.State.RemoveReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, global::Vantage.Web.OnReplacementLinkCreated_Created_ReplacementLink>, global::Vantage.Web.State.OnReplacementLinkCreated_Created_ReplacementLinkFromReplacementLinkEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, global::Vantage.Web.OnReplacementLinkRemoved_Removed_ReplacementLink>, global::Vantage.Web.State.OnReplacementLinkRemoved_Removed_ReplacementLinkFromReplacementLinkEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IGetUsersResult>, global::Vantage.Web.State.GetUsersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IGetUsersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.IGetUsersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IGetUsersResult>, global::Vantage.Web.State.GetUsersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Vantage.Web.IGetUsersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Vantage.Web.IGetUsersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IGetUsersResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.GetUsersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.IGetUsersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.GetUsersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IGetCommentsResult>, global::Vantage.Web.State.GetCommentsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IGetCommentsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.IGetCommentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IGetCommentsResult>, global::Vantage.Web.State.GetCommentsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Vantage.Web.IGetCommentsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Vantage.Web.IGetCommentsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IGetCommentsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.GetCommentsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.IGetCommentsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.GetCommentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.ISendMessageResult>, global::Vantage.Web.State.SendMessageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.ISendMessageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.ISendMessageMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.ISendMessageResult>, global::Vantage.Web.State.SendMessageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Vantage.Web.ISendMessageResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Vantage.Web.ISendMessageResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.ISendMessageResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.SendMessageMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.ISendMessageMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.SendMessageMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IOnAddedCommentResult>, global::Vantage.Web.State.OnAddedCommentResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IOnAddedCommentResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.IOnAddedCommentSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IOnAddedCommentResult>, global::Vantage.Web.State.OnAddedCommentBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Vantage.Web.IOnAddedCommentResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Vantage.Web.IOnAddedCommentResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IOnAddedCommentResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.OnAddedCommentSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.IOnAddedCommentSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.OnAddedCommentSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IGetReplacementLinksResult>, global::Vantage.Web.State.GetReplacementLinksResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IGetReplacementLinksResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.IGetReplacementLinksQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IGetReplacementLinksResult>, global::Vantage.Web.State.GetReplacementLinksBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Vantage.Web.IGetReplacementLinksResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Vantage.Web.IGetReplacementLinksResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IGetReplacementLinksResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.GetReplacementLinksQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.IGetReplacementLinksQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.GetReplacementLinksQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IAddReplacementResult>, global::Vantage.Web.State.AddReplacementResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IAddReplacementResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.IAddReplacementMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IAddReplacementResult>, global::Vantage.Web.State.AddReplacementBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Vantage.Web.IAddReplacementResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Vantage.Web.IAddReplacementResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IAddReplacementResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.AddReplacementMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.IAddReplacementMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.AddReplacementMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IRemoveReplacementLinkResult>, global::Vantage.Web.State.RemoveReplacementLinkResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IRemoveReplacementLinkResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.IRemoveReplacementLinkMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IRemoveReplacementLinkResult>, global::Vantage.Web.State.RemoveReplacementLinkBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Vantage.Web.IRemoveReplacementLinkResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Vantage.Web.IRemoveReplacementLinkResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IRemoveReplacementLinkResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.RemoveReplacementLinkMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.IRemoveReplacementLinkMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.RemoveReplacementLinkMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IOnReplacementLinkCreatedResult>, global::Vantage.Web.State.OnReplacementLinkCreatedResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IOnReplacementLinkCreatedResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.IOnReplacementLinkCreatedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IOnReplacementLinkCreatedResult>, global::Vantage.Web.State.OnReplacementLinkCreatedBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Vantage.Web.IOnReplacementLinkCreatedResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Vantage.Web.IOnReplacementLinkCreatedResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IOnReplacementLinkCreatedResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.OnReplacementLinkCreatedSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.IOnReplacementLinkCreatedSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.OnReplacementLinkCreatedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IOnReplacementLinkRemovedResult>, global::Vantage.Web.State.OnReplacementLinkRemovedResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IOnReplacementLinkRemovedResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.IOnReplacementLinkRemovedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IOnReplacementLinkRemovedResult>, global::Vantage.Web.State.OnReplacementLinkRemovedBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Vantage.Web.IOnReplacementLinkRemovedResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Vantage.Web.IOnReplacementLinkRemovedResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IOnReplacementLinkRemovedResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.OnReplacementLinkRemovedSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.IOnReplacementLinkRemovedSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.OnReplacementLinkRemovedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Vantage.Web.State.ChatClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.ChatClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Vantage.Web.IChatClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Vantage.Web.ChatClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace Vantage.Web
{
    /// <summary>
    /// This represents the API for a linked text messaging application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetUsersResult : global::System.IEquatable<GetUsersResult>, IGetUsersResult
    {
        public GetUsersResult(global::System.Collections.Generic.IReadOnlyList<global::Vantage.Web.IGetUsers_User?>? user)
        {
            User = user;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Vantage.Web.IGetUsers_User?>? User { get; }

        public virtual global::System.Boolean Equals(GetUsersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(User, other.User));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUsersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (User != null)
                {
                    foreach (var User_elm in User)
                    {
                        if (User_elm != null)
                        {
                            hash ^= 397 * User_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents users in the system that can take part in the communications.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetUsers_User_User : global::System.IEquatable<GetUsers_User_User>, IGetUsers_User_User
    {
        public GetUsers_User_User(global::System.Int32 id, global::System.String? name)
        {
            Id = id;
            Name = name;
        }

        /// <summary>
        /// Represents id for user lookup.
        /// </summary>
        public global::System.Int32 Id { get; }

        /// <summary>
        /// Represents the name of the user taking part in the communication.
        /// </summary>
        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetUsers_User_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUsers_User_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// This represents the API for a linked text messaging application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetUsersResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Vantage.Web.IGetUsers_User?>? User { get; }
    }

    /// <summary>
    /// Represents users in the system that can take part in the communications.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetUsers_User
    {
        /// <summary>
        /// Represents id for user lookup.
        /// </summary>
        public global::System.Int32 Id { get; }

        /// <summary>
        /// Represents the name of the user taking part in the communication.
        /// </summary>
        public global::System.String? Name { get; }
    }

    /// <summary>
    /// Represents users in the system that can take part in the communications.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetUsers_User_User : IGetUsers_User
    {
    }

    /// <summary>
    /// This represents the API for a linked text messaging application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetCommentsResult : global::System.IEquatable<GetCommentsResult>, IGetCommentsResult
    {
        public GetCommentsResult(global::System.Collections.Generic.IReadOnlyList<global::Vantage.Web.IGetComments_Comment?>? comment)
        {
            Comment = comment;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Vantage.Web.IGetComments_Comment?>? Comment { get; }

        public virtual global::System.Boolean Equals(GetCommentsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Comment, other.Comment));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCommentsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Comment != null)
                {
                    foreach (var Comment_elm in Comment)
                    {
                        if (Comment_elm != null)
                        {
                            hash ^= 397 * Comment_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a comment authored by a user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetComments_Comment_Comment : global::System.IEquatable<GetComments_Comment_Comment>, IGetComments_Comment_Comment
    {
        public GetComments_Comment_Comment(global::System.Int32 id, global::System.Int32 userId, global::System.String? content, global::System.DateTimeOffset dateCreated, global::Vantage.Web.IGetComments_Comment_User? user)
        {
            Id = id;
            UserId = userId;
            Content = content;
            DateCreated = dateCreated;
            User = user;
        }

        public global::System.Int32 Id { get; }

        public global::System.Int32 UserId { get; }

        public global::System.String? Content { get; }

        public global::System.DateTimeOffset DateCreated { get; }

        /// <summary>
        /// This is the user to which the comment belongs
        /// </summary>
        public global::Vantage.Web.IGetComments_Comment_User? User { get; }

        public virtual global::System.Boolean Equals(GetComments_Comment_Comment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && UserId == other.UserId && ((Content is null && other.Content is null) || Content != null && Content.Equals(other.Content)) && DateCreated.Equals(other.DateCreated) && ((User is null && other.User is null) || User != null && User.Equals(other.User));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetComments_Comment_Comment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * UserId.GetHashCode();
                if (Content != null)
                {
                    hash ^= 397 * Content.GetHashCode();
                }

                hash ^= 397 * DateCreated.GetHashCode();
                if (User != null)
                {
                    hash ^= 397 * User.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents users in the system that can take part in the communications.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetComments_Comment_User_User : global::System.IEquatable<GetComments_Comment_User_User>, IGetComments_Comment_User_User
    {
        public GetComments_Comment_User_User(global::System.Int32 id, global::System.String? name)
        {
            Id = id;
            Name = name;
        }

        /// <summary>
        /// Represents id for user lookup.
        /// </summary>
        public global::System.Int32 Id { get; }

        /// <summary>
        /// Represents the name of the user taking part in the communication.
        /// </summary>
        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetComments_Comment_User_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetComments_Comment_User_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// This represents the API for a linked text messaging application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetCommentsResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Vantage.Web.IGetComments_Comment?>? Comment { get; }
    }

    /// <summary>
    /// Represents a comment authored by a user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetComments_Comment
    {
        public global::System.Int32 Id { get; }

        public global::System.Int32 UserId { get; }

        public global::System.String? Content { get; }

        public global::System.DateTimeOffset DateCreated { get; }

        /// <summary>
        /// This is the user to which the comment belongs
        /// </summary>
        public global::Vantage.Web.IGetComments_Comment_User? User { get; }
    }

    /// <summary>
    /// Represents a comment authored by a user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetComments_Comment_Comment : IGetComments_Comment
    {
    }

    /// <summary>
    /// Represents users in the system that can take part in the communications.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetComments_Comment_User
    {
        /// <summary>
        /// Represents id for user lookup.
        /// </summary>
        public global::System.Int32 Id { get; }

        /// <summary>
        /// Represents the name of the user taking part in the communication.
        /// </summary>
        public global::System.String? Name { get; }
    }

    /// <summary>
    /// Represents users in the system that can take part in the communications.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetComments_Comment_User_User : IGetComments_Comment_User
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SendMessageResult : global::System.IEquatable<SendMessageResult>, ISendMessageResult
    {
        public SendMessageResult(global::Vantage.Web.ISendMessage_AddComment? addComment)
        {
            AddComment = addComment;
        }

        public global::Vantage.Web.ISendMessage_AddComment? AddComment { get; }

        public virtual global::System.Boolean Equals(SendMessageResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddComment is null && other.AddComment is null) || AddComment != null && AddComment.Equals(other.AddComment)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SendMessageResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddComment != null)
                {
                    hash ^= 397 * AddComment.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SendMessage_AddComment_AddCommentPayload : global::System.IEquatable<SendMessage_AddComment_AddCommentPayload>, ISendMessage_AddComment_AddCommentPayload
    {
        public SendMessage_AddComment_AddCommentPayload(global::Vantage.Web.ISendMessage_AddComment_Comment? comment)
        {
            Comment = comment;
        }

        public global::Vantage.Web.ISendMessage_AddComment_Comment? Comment { get; }

        public virtual global::System.Boolean Equals(SendMessage_AddComment_AddCommentPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Comment is null && other.Comment is null) || Comment != null && Comment.Equals(other.Comment)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SendMessage_AddComment_AddCommentPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Comment != null)
                {
                    hash ^= 397 * Comment.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a comment authored by a user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SendMessage_AddComment_Comment_Comment : global::System.IEquatable<SendMessage_AddComment_Comment_Comment>, ISendMessage_AddComment_Comment_Comment
    {
        public SendMessage_AddComment_Comment_Comment(global::System.String? content)
        {
            Content = content;
        }

        public global::System.String? Content { get; }

        public virtual global::System.Boolean Equals(SendMessage_AddComment_Comment_Comment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Content is null && other.Content is null) || Content != null && Content.Equals(other.Content)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SendMessage_AddComment_Comment_Comment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Content != null)
                {
                    hash ^= 397 * Content.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISendMessageResult
    {
        public global::Vantage.Web.ISendMessage_AddComment? AddComment { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISendMessage_AddComment
    {
        public global::Vantage.Web.ISendMessage_AddComment_Comment? Comment { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISendMessage_AddComment_AddCommentPayload : ISendMessage_AddComment
    {
    }

    /// <summary>
    /// Represents a comment authored by a user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISendMessage_AddComment_Comment
    {
        public global::System.String? Content { get; }
    }

    /// <summary>
    /// Represents a comment authored by a user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISendMessage_AddComment_Comment_Comment : ISendMessage_AddComment_Comment
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnAddedCommentResult : global::System.IEquatable<OnAddedCommentResult>, IOnAddedCommentResult
    {
        public OnAddedCommentResult(global::Vantage.Web.IOnAddedComment_Created? created)
        {
            Created = created;
        }

        public global::Vantage.Web.IOnAddedComment_Created? Created { get; }

        public virtual global::System.Boolean Equals(OnAddedCommentResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Created is null && other.Created is null) || Created != null && Created.Equals(other.Created)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnAddedCommentResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Created != null)
                {
                    hash ^= 397 * Created.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a comment authored by a user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnAddedComment_Created_Comment : global::System.IEquatable<OnAddedComment_Created_Comment>, IOnAddedComment_Created_Comment
    {
        public OnAddedComment_Created_Comment(global::System.Int32 id, global::System.Int32 userId, global::System.String? content, global::System.DateTimeOffset dateCreated, global::Vantage.Web.IOnAddedComment_Created_User? user)
        {
            Id = id;
            UserId = userId;
            Content = content;
            DateCreated = dateCreated;
            User = user;
        }

        public global::System.Int32 Id { get; }

        public global::System.Int32 UserId { get; }

        public global::System.String? Content { get; }

        public global::System.DateTimeOffset DateCreated { get; }

        /// <summary>
        /// This is the user to which the comment belongs
        /// </summary>
        public global::Vantage.Web.IOnAddedComment_Created_User? User { get; }

        public virtual global::System.Boolean Equals(OnAddedComment_Created_Comment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && UserId == other.UserId && ((Content is null && other.Content is null) || Content != null && Content.Equals(other.Content)) && DateCreated.Equals(other.DateCreated) && ((User is null && other.User is null) || User != null && User.Equals(other.User));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnAddedComment_Created_Comment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * UserId.GetHashCode();
                if (Content != null)
                {
                    hash ^= 397 * Content.GetHashCode();
                }

                hash ^= 397 * DateCreated.GetHashCode();
                if (User != null)
                {
                    hash ^= 397 * User.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents users in the system that can take part in the communications.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnAddedComment_Created_User_User : global::System.IEquatable<OnAddedComment_Created_User_User>, IOnAddedComment_Created_User_User
    {
        public OnAddedComment_Created_User_User(global::System.Int32 id, global::System.String? name)
        {
            Id = id;
            Name = name;
        }

        /// <summary>
        /// Represents id for user lookup.
        /// </summary>
        public global::System.Int32 Id { get; }

        /// <summary>
        /// Represents the name of the user taking part in the communication.
        /// </summary>
        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(OnAddedComment_Created_User_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnAddedComment_Created_User_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnAddedCommentResult
    {
        public global::Vantage.Web.IOnAddedComment_Created? Created { get; }
    }

    /// <summary>
    /// Represents a comment authored by a user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnAddedComment_Created
    {
        public global::System.Int32 Id { get; }

        public global::System.Int32 UserId { get; }

        public global::System.String? Content { get; }

        public global::System.DateTimeOffset DateCreated { get; }

        /// <summary>
        /// This is the user to which the comment belongs
        /// </summary>
        public global::Vantage.Web.IOnAddedComment_Created_User? User { get; }
    }

    /// <summary>
    /// Represents a comment authored by a user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnAddedComment_Created_Comment : IOnAddedComment_Created
    {
    }

    /// <summary>
    /// Represents users in the system that can take part in the communications.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnAddedComment_Created_User
    {
        /// <summary>
        /// Represents id for user lookup.
        /// </summary>
        public global::System.Int32 Id { get; }

        /// <summary>
        /// Represents the name of the user taking part in the communication.
        /// </summary>
        public global::System.String? Name { get; }
    }

    /// <summary>
    /// Represents users in the system that can take part in the communications.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnAddedComment_Created_User_User : IOnAddedComment_Created_User
    {
    }

    /// <summary>
    /// This represents the API for a linked text messaging application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetReplacementLinksResult : global::System.IEquatable<GetReplacementLinksResult>, IGetReplacementLinksResult
    {
        public GetReplacementLinksResult(global::System.Collections.Generic.IReadOnlyList<global::Vantage.Web.IGetReplacementLinks_ReplacementLink?>? replacementLink)
        {
            ReplacementLink = replacementLink;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Vantage.Web.IGetReplacementLinks_ReplacementLink?>? ReplacementLink { get; }

        public virtual global::System.Boolean Equals(GetReplacementLinksResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ReplacementLink, other.ReplacementLink));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetReplacementLinksResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ReplacementLink != null)
                {
                    foreach (var ReplacementLink_elm in ReplacementLink)
                    {
                        if (ReplacementLink_elm != null)
                        {
                            hash ^= 397 * ReplacementLink_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents replacement link to replace value of comment with.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetReplacementLinks_ReplacementLink_ReplacementLink : global::System.IEquatable<GetReplacementLinks_ReplacementLink_ReplacementLink>, IGetReplacementLinks_ReplacementLink_ReplacementLink
    {
        public GetReplacementLinks_ReplacementLink_ReplacementLink(global::System.String? keyword, global::System.String? hyperlink)
        {
            Keyword = keyword;
            Hyperlink = hyperlink;
        }

        /// <summary>
        /// Represents the keyword for searching hyperlinks in comment text.
        /// </summary>
        public global::System.String? Keyword { get; }

        /// <summary>
        /// Represents the hyperlink that will wrap the keyword when a keyword match is found in comment text.
        /// </summary>
        public global::System.String? Hyperlink { get; }

        public virtual global::System.Boolean Equals(GetReplacementLinks_ReplacementLink_ReplacementLink? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Keyword is null && other.Keyword is null) || Keyword != null && Keyword.Equals(other.Keyword))) && ((Hyperlink is null && other.Hyperlink is null) || Hyperlink != null && Hyperlink.Equals(other.Hyperlink));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetReplacementLinks_ReplacementLink_ReplacementLink)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Keyword != null)
                {
                    hash ^= 397 * Keyword.GetHashCode();
                }

                if (Hyperlink != null)
                {
                    hash ^= 397 * Hyperlink.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// This represents the API for a linked text messaging application.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetReplacementLinksResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Vantage.Web.IGetReplacementLinks_ReplacementLink?>? ReplacementLink { get; }
    }

    /// <summary>
    /// Represents replacement link to replace value of comment with.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetReplacementLinks_ReplacementLink
    {
        /// <summary>
        /// Represents the keyword for searching hyperlinks in comment text.
        /// </summary>
        public global::System.String? Keyword { get; }

        /// <summary>
        /// Represents the hyperlink that will wrap the keyword when a keyword match is found in comment text.
        /// </summary>
        public global::System.String? Hyperlink { get; }
    }

    /// <summary>
    /// Represents replacement link to replace value of comment with.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetReplacementLinks_ReplacementLink_ReplacementLink : IGetReplacementLinks_ReplacementLink
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddReplacementResult : global::System.IEquatable<AddReplacementResult>, IAddReplacementResult
    {
        public AddReplacementResult(global::Vantage.Web.IAddReplacement_AddReplacementLink? addReplacementLink)
        {
            AddReplacementLink = addReplacementLink;
        }

        public global::Vantage.Web.IAddReplacement_AddReplacementLink? AddReplacementLink { get; }

        public virtual global::System.Boolean Equals(AddReplacementResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddReplacementLink is null && other.AddReplacementLink is null) || AddReplacementLink != null && AddReplacementLink.Equals(other.AddReplacementLink)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddReplacementResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddReplacementLink != null)
                {
                    hash ^= 397 * AddReplacementLink.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddReplacement_AddReplacementLink_ReplacementRecords : global::System.IEquatable<AddReplacement_AddReplacementLink_ReplacementRecords>, IAddReplacement_AddReplacementLink_ReplacementRecords
    {
        public AddReplacement_AddReplacementLink_ReplacementRecords(global::Vantage.Web.IAddReplacement_AddReplacementLink_ReplacementLink? replacementLink)
        {
            ReplacementLink = replacementLink;
        }

        public global::Vantage.Web.IAddReplacement_AddReplacementLink_ReplacementLink? ReplacementLink { get; }

        public virtual global::System.Boolean Equals(AddReplacement_AddReplacementLink_ReplacementRecords? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ReplacementLink is null && other.ReplacementLink is null) || ReplacementLink != null && ReplacementLink.Equals(other.ReplacementLink)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddReplacement_AddReplacementLink_ReplacementRecords)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ReplacementLink != null)
                {
                    hash ^= 397 * ReplacementLink.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents replacement link to replace value of comment with.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddReplacement_AddReplacementLink_ReplacementLink_ReplacementLink : global::System.IEquatable<AddReplacement_AddReplacementLink_ReplacementLink_ReplacementLink>, IAddReplacement_AddReplacementLink_ReplacementLink_ReplacementLink
    {
        public AddReplacement_AddReplacementLink_ReplacementLink_ReplacementLink(global::System.String? keyword, global::System.String? hyperlink)
        {
            Keyword = keyword;
            Hyperlink = hyperlink;
        }

        /// <summary>
        /// Represents the keyword for searching hyperlinks in comment text.
        /// </summary>
        public global::System.String? Keyword { get; }

        /// <summary>
        /// Represents the hyperlink that will wrap the keyword when a keyword match is found in comment text.
        /// </summary>
        public global::System.String? Hyperlink { get; }

        public virtual global::System.Boolean Equals(AddReplacement_AddReplacementLink_ReplacementLink_ReplacementLink? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Keyword is null && other.Keyword is null) || Keyword != null && Keyword.Equals(other.Keyword))) && ((Hyperlink is null && other.Hyperlink is null) || Hyperlink != null && Hyperlink.Equals(other.Hyperlink));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddReplacement_AddReplacementLink_ReplacementLink_ReplacementLink)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Keyword != null)
                {
                    hash ^= 397 * Keyword.GetHashCode();
                }

                if (Hyperlink != null)
                {
                    hash ^= 397 * Hyperlink.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IAddReplacementResult
    {
        public global::Vantage.Web.IAddReplacement_AddReplacementLink? AddReplacementLink { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IAddReplacement_AddReplacementLink
    {
        public global::Vantage.Web.IAddReplacement_AddReplacementLink_ReplacementLink? ReplacementLink { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IAddReplacement_AddReplacementLink_ReplacementRecords : IAddReplacement_AddReplacementLink
    {
    }

    /// <summary>
    /// Represents replacement link to replace value of comment with.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ILinkText
    {
        /// <summary>
        /// Represents the keyword for searching hyperlinks in comment text.
        /// </summary>
        public global::System.String? Keyword { get; }

        /// <summary>
        /// Represents the hyperlink that will wrap the keyword when a keyword match is found in comment text.
        /// </summary>
        public global::System.String? Hyperlink { get; }
    }

    /// <summary>
    /// Represents replacement link to replace value of comment with.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IAddReplacement_AddReplacementLink_ReplacementLink : ILinkText
    {
    }

    /// <summary>
    /// Represents replacement link to replace value of comment with.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IAddReplacement_AddReplacementLink_ReplacementLink_ReplacementLink : IAddReplacement_AddReplacementLink_ReplacementLink
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class RemoveReplacementLinkResult : global::System.IEquatable<RemoveReplacementLinkResult>, IRemoveReplacementLinkResult
    {
        public RemoveReplacementLinkResult(global::Vantage.Web.IRemoveReplacementLink_RemoveReplacementLink? removeReplacementLink)
        {
            RemoveReplacementLink = removeReplacementLink;
        }

        public global::Vantage.Web.IRemoveReplacementLink_RemoveReplacementLink? RemoveReplacementLink { get; }

        public virtual global::System.Boolean Equals(RemoveReplacementLinkResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((RemoveReplacementLink is null && other.RemoveReplacementLink is null) || RemoveReplacementLink != null && RemoveReplacementLink.Equals(other.RemoveReplacementLink)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RemoveReplacementLinkResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (RemoveReplacementLink != null)
                {
                    hash ^= 397 * RemoveReplacementLink.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class RemoveReplacementLink_RemoveReplacementLink_RemoveReplacementLinkPayload : global::System.IEquatable<RemoveReplacementLink_RemoveReplacementLink_RemoveReplacementLinkPayload>, IRemoveReplacementLink_RemoveReplacementLink_RemoveReplacementLinkPayload
    {
        public RemoveReplacementLink_RemoveReplacementLink_RemoveReplacementLinkPayload(global::Vantage.Web.IRemoveReplacementLink_RemoveReplacementLink_ReplacementLink? replacementLink)
        {
            ReplacementLink = replacementLink;
        }

        public global::Vantage.Web.IRemoveReplacementLink_RemoveReplacementLink_ReplacementLink? ReplacementLink { get; }

        public virtual global::System.Boolean Equals(RemoveReplacementLink_RemoveReplacementLink_RemoveReplacementLinkPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ReplacementLink is null && other.ReplacementLink is null) || ReplacementLink != null && ReplacementLink.Equals(other.ReplacementLink)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RemoveReplacementLink_RemoveReplacementLink_RemoveReplacementLinkPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ReplacementLink != null)
                {
                    hash ^= 397 * ReplacementLink.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents replacement link to replace value of comment with.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class RemoveReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLink : global::System.IEquatable<RemoveReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLink>, IRemoveReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLink
    {
        public RemoveReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLink(global::System.String? keyword, global::System.String? hyperlink)
        {
            Keyword = keyword;
            Hyperlink = hyperlink;
        }

        /// <summary>
        /// Represents the keyword for searching hyperlinks in comment text.
        /// </summary>
        public global::System.String? Keyword { get; }

        /// <summary>
        /// Represents the hyperlink that will wrap the keyword when a keyword match is found in comment text.
        /// </summary>
        public global::System.String? Hyperlink { get; }

        public virtual global::System.Boolean Equals(RemoveReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLink? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Keyword is null && other.Keyword is null) || Keyword != null && Keyword.Equals(other.Keyword))) && ((Hyperlink is null && other.Hyperlink is null) || Hyperlink != null && Hyperlink.Equals(other.Hyperlink));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RemoveReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLink)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Keyword != null)
                {
                    hash ^= 397 * Keyword.GetHashCode();
                }

                if (Hyperlink != null)
                {
                    hash ^= 397 * Hyperlink.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IRemoveReplacementLinkResult
    {
        public global::Vantage.Web.IRemoveReplacementLink_RemoveReplacementLink? RemoveReplacementLink { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IRemoveReplacementLink_RemoveReplacementLink
    {
        public global::Vantage.Web.IRemoveReplacementLink_RemoveReplacementLink_ReplacementLink? ReplacementLink { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IRemoveReplacementLink_RemoveReplacementLink_RemoveReplacementLinkPayload : IRemoveReplacementLink_RemoveReplacementLink
    {
    }

    /// <summary>
    /// Represents replacement link to replace value of comment with.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IRemoveReplacementLink_RemoveReplacementLink_ReplacementLink : ILinkText
    {
    }

    /// <summary>
    /// Represents replacement link to replace value of comment with.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IRemoveReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLink : IRemoveReplacementLink_RemoveReplacementLink_ReplacementLink
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnReplacementLinkCreatedResult : global::System.IEquatable<OnReplacementLinkCreatedResult>, IOnReplacementLinkCreatedResult
    {
        public OnReplacementLinkCreatedResult(global::Vantage.Web.IOnReplacementLinkCreated_Created? created)
        {
            Created = created;
        }

        public global::Vantage.Web.IOnReplacementLinkCreated_Created? Created { get; }

        public virtual global::System.Boolean Equals(OnReplacementLinkCreatedResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Created is null && other.Created is null) || Created != null && Created.Equals(other.Created)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnReplacementLinkCreatedResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Created != null)
                {
                    hash ^= 397 * Created.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents replacement link to replace value of comment with.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnReplacementLinkCreated_Created_ReplacementLink : global::System.IEquatable<OnReplacementLinkCreated_Created_ReplacementLink>, IOnReplacementLinkCreated_Created_ReplacementLink
    {
        public OnReplacementLinkCreated_Created_ReplacementLink(global::System.String? keyword, global::System.String? hyperlink)
        {
            Keyword = keyword;
            Hyperlink = hyperlink;
        }

        /// <summary>
        /// Represents the keyword for searching hyperlinks in comment text.
        /// </summary>
        public global::System.String? Keyword { get; }

        /// <summary>
        /// Represents the hyperlink that will wrap the keyword when a keyword match is found in comment text.
        /// </summary>
        public global::System.String? Hyperlink { get; }

        public virtual global::System.Boolean Equals(OnReplacementLinkCreated_Created_ReplacementLink? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Keyword is null && other.Keyword is null) || Keyword != null && Keyword.Equals(other.Keyword))) && ((Hyperlink is null && other.Hyperlink is null) || Hyperlink != null && Hyperlink.Equals(other.Hyperlink));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnReplacementLinkCreated_Created_ReplacementLink)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Keyword != null)
                {
                    hash ^= 397 * Keyword.GetHashCode();
                }

                if (Hyperlink != null)
                {
                    hash ^= 397 * Hyperlink.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnReplacementLinkCreatedResult
    {
        public global::Vantage.Web.IOnReplacementLinkCreated_Created? Created { get; }
    }

    /// <summary>
    /// Represents replacement link to replace value of comment with.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnReplacementLinkCreated_Created : ILinkText
    {
    }

    /// <summary>
    /// Represents replacement link to replace value of comment with.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnReplacementLinkCreated_Created_ReplacementLink : IOnReplacementLinkCreated_Created
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnReplacementLinkRemovedResult : global::System.IEquatable<OnReplacementLinkRemovedResult>, IOnReplacementLinkRemovedResult
    {
        public OnReplacementLinkRemovedResult(global::Vantage.Web.IOnReplacementLinkRemoved_Removed? removed)
        {
            Removed = removed;
        }

        public global::Vantage.Web.IOnReplacementLinkRemoved_Removed? Removed { get; }

        public virtual global::System.Boolean Equals(OnReplacementLinkRemovedResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Removed is null && other.Removed is null) || Removed != null && Removed.Equals(other.Removed)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnReplacementLinkRemovedResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Removed != null)
                {
                    hash ^= 397 * Removed.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents replacement link to replace value of comment with.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnReplacementLinkRemoved_Removed_ReplacementLink : global::System.IEquatable<OnReplacementLinkRemoved_Removed_ReplacementLink>, IOnReplacementLinkRemoved_Removed_ReplacementLink
    {
        public OnReplacementLinkRemoved_Removed_ReplacementLink(global::System.String? keyword, global::System.String? hyperlink)
        {
            Keyword = keyword;
            Hyperlink = hyperlink;
        }

        /// <summary>
        /// Represents the keyword for searching hyperlinks in comment text.
        /// </summary>
        public global::System.String? Keyword { get; }

        /// <summary>
        /// Represents the hyperlink that will wrap the keyword when a keyword match is found in comment text.
        /// </summary>
        public global::System.String? Hyperlink { get; }

        public virtual global::System.Boolean Equals(OnReplacementLinkRemoved_Removed_ReplacementLink? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Keyword is null && other.Keyword is null) || Keyword != null && Keyword.Equals(other.Keyword))) && ((Hyperlink is null && other.Hyperlink is null) || Hyperlink != null && Hyperlink.Equals(other.Hyperlink));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnReplacementLinkRemoved_Removed_ReplacementLink)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Keyword != null)
                {
                    hash ^= 397 * Keyword.GetHashCode();
                }

                if (Hyperlink != null)
                {
                    hash ^= 397 * Hyperlink.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnReplacementLinkRemovedResult
    {
        public global::Vantage.Web.IOnReplacementLinkRemoved_Removed? Removed { get; }
    }

    /// <summary>
    /// Represents replacement link to replace value of comment with.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnReplacementLinkRemoved_Removed : ILinkText
    {
    }

    /// <summary>
    /// Represents replacement link to replace value of comment with.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnReplacementLinkRemoved_Removed_ReplacementLink : IOnReplacementLinkRemoved_Removed
    {
    }

    /// <summary>
    /// Represents the operation service of the GetUsers GraphQL operation
    /// <code>
    /// query GetUsers {
    ///   user {
    ///     __typename
    ///     id
    ///     name
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetUsersQueryDocument : global::StrawberryShake.IDocument
    {
        private GetUsersQueryDocument()
        {
        }

        public static GetUsersQueryDocument Instance { get; } = new GetUsersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "0bbd15349b5ace823a29228cb7117a3b");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUsers GraphQL operation
    /// <code>
    /// query GetUsers {
    ///   user {
    ///     __typename
    ///     id
    ///     name
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetUsersQuery : global::Vantage.Web.IGetUsersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetUsersResult> _operationExecutor;
        public GetUsersQuery(global::StrawberryShake.IOperationExecutor<IGetUsersResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetUsersResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUsersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUsersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetUsersQueryDocument.Instance.Hash.Value, name: "GetUsers", document: GetUsersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUsers GraphQL operation
    /// <code>
    /// query GetUsers {
    ///   user {
    ///     __typename
    ///     id
    ///     name
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetUsersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUsersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUsersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetComments GraphQL operation
    /// <code>
    /// query GetComments {
    ///   comment {
    ///     __typename
    ///     id
    ///     userId
    ///     content
    ///     dateCreated
    ///     user {
    ///       __typename
    ///       id
    ///       name
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetCommentsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetCommentsQueryDocument()
        {
        }

        public static GetCommentsQueryDocument Instance { get; } = new GetCommentsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "0f5660b680746a254fe0dad4bcbb3fde");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetComments GraphQL operation
    /// <code>
    /// query GetComments {
    ///   comment {
    ///     __typename
    ///     id
    ///     userId
    ///     content
    ///     dateCreated
    ///     user {
    ///       __typename
    ///       id
    ///       name
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetCommentsQuery : global::Vantage.Web.IGetCommentsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCommentsResult> _operationExecutor;
        public GetCommentsQuery(global::StrawberryShake.IOperationExecutor<IGetCommentsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCommentsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCommentsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCommentsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCommentsQueryDocument.Instance.Hash.Value, name: "GetComments", document: GetCommentsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetComments GraphQL operation
    /// <code>
    /// query GetComments {
    ///   comment {
    ///     __typename
    ///     id
    ///     userId
    ///     content
    ///     dateCreated
    ///     user {
    ///       __typename
    ///       id
    ///       name
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetCommentsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCommentsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCommentsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the SendMessage GraphQL operation
    /// <code>
    /// mutation SendMessage($comment: String!, $userId: Int!) {
    ///   addComment(input: { content: $comment, userId: $userId }) {
    ///     __typename
    ///     comment {
    ///       __typename
    ///       content
    ///       ... on Comment {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SendMessageMutationDocument : global::StrawberryShake.IDocument
    {
        private SendMessageMutationDocument()
        {
        }

        public static SendMessageMutationDocument Instance { get; } = new SendMessageMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x24, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "94c8f9ec73acaf72575d7f76893c714d");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the SendMessage GraphQL operation
    /// <code>
    /// mutation SendMessage($comment: String!, $userId: Int!) {
    ///   addComment(input: { content: $comment, userId: $userId }) {
    ///     __typename
    ///     comment {
    ///       __typename
    ///       content
    ///       ... on Comment {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SendMessageMutation : global::Vantage.Web.ISendMessageMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ISendMessageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public SendMessageMutation(global::StrawberryShake.IOperationExecutor<ISendMessageResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ISendMessageResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISendMessageResult>> ExecuteAsync(global::System.String comment, global::System.Int32 userId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(comment, userId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ISendMessageResult>> Watch(global::System.String comment, global::System.Int32 userId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(comment, userId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String comment, global::System.Int32 userId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("comment", FormatComment(comment));
            variables.Add("userId", FormatUserId(userId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: SendMessageMutationDocument.Instance.Hash.Value, name: "SendMessage", document: SendMessageMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatComment(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatUserId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the SendMessage GraphQL operation
    /// <code>
    /// mutation SendMessage($comment: String!, $userId: Int!) {
    ///   addComment(input: { content: $comment, userId: $userId }) {
    ///     __typename
    ///     comment {
    ///       __typename
    ///       content
    ///       ... on Comment {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ISendMessageMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISendMessageResult>> ExecuteAsync(global::System.String comment, global::System.Int32 userId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ISendMessageResult>> Watch(global::System.String comment, global::System.Int32 userId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the OnAddedComment GraphQL operation
    /// <code>
    /// subscription OnAddedComment {
    ///   created: onCommentCreated {
    ///     __typename
    ///     id
    ///     userId
    ///     content
    ///     dateCreated
    ///     user {
    ///       __typename
    ///       id
    ///       name
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnAddedCommentSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private OnAddedCommentSubscriptionDocument()
        {
        }

        public static OnAddedCommentSubscriptionDocument Instance { get; } = new OnAddedCommentSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x6e, 0x41, 0x64, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x20, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "54981d8f463eddc040231d74996fdf26");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the OnAddedComment GraphQL operation
    /// <code>
    /// subscription OnAddedComment {
    ///   created: onCommentCreated {
    ///     __typename
    ///     id
    ///     userId
    ///     content
    ///     dateCreated
    ///     user {
    ///       __typename
    ///       id
    ///       name
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnAddedCommentSubscription : global::Vantage.Web.IOnAddedCommentSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<IOnAddedCommentResult> _operationExecutor;
        public OnAddedCommentSubscription(global::StrawberryShake.IOperationExecutor<IOnAddedCommentResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IOnAddedCommentResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<IOnAddedCommentResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: OnAddedCommentSubscriptionDocument.Instance.Hash.Value, name: "OnAddedComment", document: OnAddedCommentSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the OnAddedComment GraphQL operation
    /// <code>
    /// subscription OnAddedComment {
    ///   created: onCommentCreated {
    ///     __typename
    ///     id
    ///     userId
    ///     content
    ///     dateCreated
    ///     user {
    ///       __typename
    ///       id
    ///       name
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     ... on Comment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnAddedCommentSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<IOnAddedCommentResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetReplacementLinks GraphQL operation
    /// <code>
    /// query GetReplacementLinks {
    ///   replacementLink {
    ///     __typename
    ///     keyword
    ///     hyperlink
    ///     ... on ReplacementLink {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetReplacementLinksQueryDocument : global::StrawberryShake.IDocument
    {
        private GetReplacementLinksQueryDocument()
        {
        }

        public static GetReplacementLinksQueryDocument Instance { get; } = new GetReplacementLinksQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "ef8c50e541c898d2c24da4b729f8e1f5");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetReplacementLinks GraphQL operation
    /// <code>
    /// query GetReplacementLinks {
    ///   replacementLink {
    ///     __typename
    ///     keyword
    ///     hyperlink
    ///     ... on ReplacementLink {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetReplacementLinksQuery : global::Vantage.Web.IGetReplacementLinksQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetReplacementLinksResult> _operationExecutor;
        public GetReplacementLinksQuery(global::StrawberryShake.IOperationExecutor<IGetReplacementLinksResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetReplacementLinksResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetReplacementLinksResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetReplacementLinksResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetReplacementLinksQueryDocument.Instance.Hash.Value, name: "GetReplacementLinks", document: GetReplacementLinksQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetReplacementLinks GraphQL operation
    /// <code>
    /// query GetReplacementLinks {
    ///   replacementLink {
    ///     __typename
    ///     keyword
    ///     hyperlink
    ///     ... on ReplacementLink {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetReplacementLinksQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetReplacementLinksResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetReplacementLinksResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddReplacement GraphQL operation
    /// <code>
    /// mutation AddReplacement($keyword: String!, $hyperlink: String!) {
    ///   addReplacementLink(input: { keyword: $keyword, hyperlink: $hyperlink }) {
    ///     __typename
    ///     replacementLink {
    ///       __typename
    ///       ... linkText
    ///       ... on ReplacementLink {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment linkText on ReplacementLink {
    ///   keyword
    ///   hyperlink
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddReplacementMutationDocument : global::StrawberryShake.IDocument
    {
        private AddReplacementMutationDocument()
        {
        }

        public static AddReplacementMutationDocument Instance { get; } = new AddReplacementMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x24, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x7b, 0x20, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x20, 0x24, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x3a, 0x20, 0x24, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x7b, 0x20, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "84e9a8bdd98f40164f96433c36b199a8");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddReplacement GraphQL operation
    /// <code>
    /// mutation AddReplacement($keyword: String!, $hyperlink: String!) {
    ///   addReplacementLink(input: { keyword: $keyword, hyperlink: $hyperlink }) {
    ///     __typename
    ///     replacementLink {
    ///       __typename
    ///       ... linkText
    ///       ... on ReplacementLink {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment linkText on ReplacementLink {
    ///   keyword
    ///   hyperlink
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddReplacementMutation : global::Vantage.Web.IAddReplacementMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddReplacementResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public AddReplacementMutation(global::StrawberryShake.IOperationExecutor<IAddReplacementResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddReplacementResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddReplacementResult>> ExecuteAsync(global::System.String keyword, global::System.String hyperlink, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(keyword, hyperlink);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddReplacementResult>> Watch(global::System.String keyword, global::System.String hyperlink, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(keyword, hyperlink);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String keyword, global::System.String hyperlink)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("keyword", FormatKeyword(keyword));
            variables.Add("hyperlink", FormatHyperlink(hyperlink));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddReplacementMutationDocument.Instance.Hash.Value, name: "AddReplacement", document: AddReplacementMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatKeyword(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatHyperlink(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddReplacement GraphQL operation
    /// <code>
    /// mutation AddReplacement($keyword: String!, $hyperlink: String!) {
    ///   addReplacementLink(input: { keyword: $keyword, hyperlink: $hyperlink }) {
    ///     __typename
    ///     replacementLink {
    ///       __typename
    ///       ... linkText
    ///       ... on ReplacementLink {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment linkText on ReplacementLink {
    ///   keyword
    ///   hyperlink
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IAddReplacementMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddReplacementResult>> ExecuteAsync(global::System.String keyword, global::System.String hyperlink, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddReplacementResult>> Watch(global::System.String keyword, global::System.String hyperlink, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the RemoveReplacementLink GraphQL operation
    /// <code>
    /// mutation RemoveReplacementLink($keyword: String!) {
    ///   removeReplacementLink(keyword: $keyword) {
    ///     __typename
    ///     replacementLink {
    ///       __typename
    ///       ... linkText
    ///       ... on ReplacementLink {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment linkText on ReplacementLink {
    ///   keyword
    ///   hyperlink
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class RemoveReplacementLinkMutationDocument : global::StrawberryShake.IDocument
    {
        private RemoveReplacementLinkMutationDocument()
        {
        }

        public static RemoveReplacementLinkMutationDocument Instance { get; } = new RemoveReplacementLinkMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x28, 0x24, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x28, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x20, 0x24, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x7b, 0x20, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "f30b0b2e0e7a484d8f27f689220c7f94");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the RemoveReplacementLink GraphQL operation
    /// <code>
    /// mutation RemoveReplacementLink($keyword: String!) {
    ///   removeReplacementLink(keyword: $keyword) {
    ///     __typename
    ///     replacementLink {
    ///       __typename
    ///       ... linkText
    ///       ... on ReplacementLink {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment linkText on ReplacementLink {
    ///   keyword
    ///   hyperlink
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class RemoveReplacementLinkMutation : global::Vantage.Web.IRemoveReplacementLinkMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IRemoveReplacementLinkResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public RemoveReplacementLinkMutation(global::StrawberryShake.IOperationExecutor<IRemoveReplacementLinkResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IRemoveReplacementLinkResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRemoveReplacementLinkResult>> ExecuteAsync(global::System.String keyword, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(keyword);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IRemoveReplacementLinkResult>> Watch(global::System.String keyword, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(keyword);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String keyword)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("keyword", FormatKeyword(keyword));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: RemoveReplacementLinkMutationDocument.Instance.Hash.Value, name: "RemoveReplacementLink", document: RemoveReplacementLinkMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatKeyword(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the RemoveReplacementLink GraphQL operation
    /// <code>
    /// mutation RemoveReplacementLink($keyword: String!) {
    ///   removeReplacementLink(keyword: $keyword) {
    ///     __typename
    ///     replacementLink {
    ///       __typename
    ///       ... linkText
    ///       ... on ReplacementLink {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment linkText on ReplacementLink {
    ///   keyword
    ///   hyperlink
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IRemoveReplacementLinkMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRemoveReplacementLinkResult>> ExecuteAsync(global::System.String keyword, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IRemoveReplacementLinkResult>> Watch(global::System.String keyword, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the OnReplacementLinkCreated GraphQL operation
    /// <code>
    /// subscription OnReplacementLinkCreated {
    ///   created: onReplacementLinkCreated {
    ///     __typename
    ///     ... linkText
    ///     ... on ReplacementLink {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment linkText on ReplacementLink {
    ///   keyword
    ///   hyperlink
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnReplacementLinkCreatedSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private OnReplacementLinkCreatedSubscriptionDocument()
        {
        }

        public static OnReplacementLinkCreatedSubscriptionDocument Instance { get; } = new OnReplacementLinkCreatedSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x20, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x7b, 0x20, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "58251617ccc65d692bb8eab03df9e124");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the OnReplacementLinkCreated GraphQL operation
    /// <code>
    /// subscription OnReplacementLinkCreated {
    ///   created: onReplacementLinkCreated {
    ///     __typename
    ///     ... linkText
    ///     ... on ReplacementLink {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment linkText on ReplacementLink {
    ///   keyword
    ///   hyperlink
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnReplacementLinkCreatedSubscription : global::Vantage.Web.IOnReplacementLinkCreatedSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<IOnReplacementLinkCreatedResult> _operationExecutor;
        public OnReplacementLinkCreatedSubscription(global::StrawberryShake.IOperationExecutor<IOnReplacementLinkCreatedResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IOnReplacementLinkCreatedResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<IOnReplacementLinkCreatedResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: OnReplacementLinkCreatedSubscriptionDocument.Instance.Hash.Value, name: "OnReplacementLinkCreated", document: OnReplacementLinkCreatedSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the OnReplacementLinkCreated GraphQL operation
    /// <code>
    /// subscription OnReplacementLinkCreated {
    ///   created: onReplacementLinkCreated {
    ///     __typename
    ///     ... linkText
    ///     ... on ReplacementLink {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment linkText on ReplacementLink {
    ///   keyword
    ///   hyperlink
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnReplacementLinkCreatedSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<IOnReplacementLinkCreatedResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the OnReplacementLinkRemoved GraphQL operation
    /// <code>
    /// subscription OnReplacementLinkRemoved {
    ///   removed: onReplacementLinkRemoved {
    ///     __typename
    ///     ... linkText
    ///     ... on ReplacementLink {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment linkText on ReplacementLink {
    ///   keyword
    ///   hyperlink
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnReplacementLinkRemovedSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private OnReplacementLinkRemovedSubscriptionDocument()
        {
        }

        public static OnReplacementLinkRemovedSubscriptionDocument Instance { get; } = new OnReplacementLinkRemovedSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x3a, 0x20, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x7b, 0x20, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "56fb6295b77badaa29922d8d44cd9d24");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the OnReplacementLinkRemoved GraphQL operation
    /// <code>
    /// subscription OnReplacementLinkRemoved {
    ///   removed: onReplacementLinkRemoved {
    ///     __typename
    ///     ... linkText
    ///     ... on ReplacementLink {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment linkText on ReplacementLink {
    ///   keyword
    ///   hyperlink
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnReplacementLinkRemovedSubscription : global::Vantage.Web.IOnReplacementLinkRemovedSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<IOnReplacementLinkRemovedResult> _operationExecutor;
        public OnReplacementLinkRemovedSubscription(global::StrawberryShake.IOperationExecutor<IOnReplacementLinkRemovedResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IOnReplacementLinkRemovedResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<IOnReplacementLinkRemovedResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: OnReplacementLinkRemovedSubscriptionDocument.Instance.Hash.Value, name: "OnReplacementLinkRemoved", document: OnReplacementLinkRemovedSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the OnReplacementLinkRemoved GraphQL operation
    /// <code>
    /// subscription OnReplacementLinkRemoved {
    ///   removed: onReplacementLinkRemoved {
    ///     __typename
    ///     ... linkText
    ///     ... on ReplacementLink {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment linkText on ReplacementLink {
    ///   keyword
    ///   hyperlink
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnReplacementLinkRemovedSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<IOnReplacementLinkRemovedResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the ChatClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class ChatClient : global::Vantage.Web.IChatClient
    {
        private readonly global::Vantage.Web.IGetUsersQuery _getUsers;
        private readonly global::Vantage.Web.IGetCommentsQuery _getComments;
        private readonly global::Vantage.Web.ISendMessageMutation _sendMessage;
        private readonly global::Vantage.Web.IOnAddedCommentSubscription _onAddedComment;
        private readonly global::Vantage.Web.IGetReplacementLinksQuery _getReplacementLinks;
        private readonly global::Vantage.Web.IAddReplacementMutation _addReplacement;
        private readonly global::Vantage.Web.IRemoveReplacementLinkMutation _removeReplacementLink;
        private readonly global::Vantage.Web.IOnReplacementLinkCreatedSubscription _onReplacementLinkCreated;
        private readonly global::Vantage.Web.IOnReplacementLinkRemovedSubscription _onReplacementLinkRemoved;
        public ChatClient(global::Vantage.Web.IGetUsersQuery getUsers, global::Vantage.Web.IGetCommentsQuery getComments, global::Vantage.Web.ISendMessageMutation sendMessage, global::Vantage.Web.IOnAddedCommentSubscription onAddedComment, global::Vantage.Web.IGetReplacementLinksQuery getReplacementLinks, global::Vantage.Web.IAddReplacementMutation addReplacement, global::Vantage.Web.IRemoveReplacementLinkMutation removeReplacementLink, global::Vantage.Web.IOnReplacementLinkCreatedSubscription onReplacementLinkCreated, global::Vantage.Web.IOnReplacementLinkRemovedSubscription onReplacementLinkRemoved)
        {
            _getUsers = getUsers ?? throw new global::System.ArgumentNullException(nameof(getUsers));
            _getComments = getComments ?? throw new global::System.ArgumentNullException(nameof(getComments));
            _sendMessage = sendMessage ?? throw new global::System.ArgumentNullException(nameof(sendMessage));
            _onAddedComment = onAddedComment ?? throw new global::System.ArgumentNullException(nameof(onAddedComment));
            _getReplacementLinks = getReplacementLinks ?? throw new global::System.ArgumentNullException(nameof(getReplacementLinks));
            _addReplacement = addReplacement ?? throw new global::System.ArgumentNullException(nameof(addReplacement));
            _removeReplacementLink = removeReplacementLink ?? throw new global::System.ArgumentNullException(nameof(removeReplacementLink));
            _onReplacementLinkCreated = onReplacementLinkCreated ?? throw new global::System.ArgumentNullException(nameof(onReplacementLinkCreated));
            _onReplacementLinkRemoved = onReplacementLinkRemoved ?? throw new global::System.ArgumentNullException(nameof(onReplacementLinkRemoved));
        }

        public static global::System.String ClientName => "ChatClient";
        public global::Vantage.Web.IGetUsersQuery GetUsers => _getUsers;
        public global::Vantage.Web.IGetCommentsQuery GetComments => _getComments;
        public global::Vantage.Web.ISendMessageMutation SendMessage => _sendMessage;
        public global::Vantage.Web.IOnAddedCommentSubscription OnAddedComment => _onAddedComment;
        public global::Vantage.Web.IGetReplacementLinksQuery GetReplacementLinks => _getReplacementLinks;
        public global::Vantage.Web.IAddReplacementMutation AddReplacement => _addReplacement;
        public global::Vantage.Web.IRemoveReplacementLinkMutation RemoveReplacementLink => _removeReplacementLink;
        public global::Vantage.Web.IOnReplacementLinkCreatedSubscription OnReplacementLinkCreated => _onReplacementLinkCreated;
        public global::Vantage.Web.IOnReplacementLinkRemovedSubscription OnReplacementLinkRemoved => _onReplacementLinkRemoved;
    }

    /// <summary>
    /// Represents the ChatClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IChatClient
    {
        global::Vantage.Web.IGetUsersQuery GetUsers { get; }

        global::Vantage.Web.IGetCommentsQuery GetComments { get; }

        global::Vantage.Web.ISendMessageMutation SendMessage { get; }

        global::Vantage.Web.IOnAddedCommentSubscription OnAddedComment { get; }

        global::Vantage.Web.IGetReplacementLinksQuery GetReplacementLinks { get; }

        global::Vantage.Web.IAddReplacementMutation AddReplacement { get; }

        global::Vantage.Web.IRemoveReplacementLinkMutation RemoveReplacementLink { get; }

        global::Vantage.Web.IOnReplacementLinkCreatedSubscription OnReplacementLinkCreated { get; }

        global::Vantage.Web.IOnReplacementLinkRemovedSubscription OnReplacementLinkRemoved { get; }
    }
}

namespace Vantage.Web.State
{
    ///<summary>Represents users in the system that can take part in the communications.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial record UserEntity
    {
        public UserEntity(global::System.Int32 id = default !, global::System.String? name = default !)
        {
            Id = id;
            Name = name;
        }

        ///<summary>Represents id for user lookup.</summary>
        public global::System.Int32 Id { get; init; }

        ///<summary>Represents the name of the user taking part in the communication.</summary>
        public global::System.String? Name { get; init; }
    }

    ///<summary>Represents a comment authored by a user</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial record CommentEntity
    {
        public CommentEntity(global::System.Int32 id = default !, global::System.Int32 userId = default !, global::System.String? content = default !, global::System.DateTimeOffset dateCreated = default !, global::StrawberryShake.EntityId? user = default !)
        {
            Id = id;
            UserId = userId;
            Content = content;
            DateCreated = dateCreated;
            User = user;
        }

        public global::System.Int32 Id { get; init; }

        public global::System.Int32 UserId { get; init; }

        public global::System.String? Content { get; init; }

        public global::System.DateTimeOffset DateCreated { get; init; }

        ///<summary>This is the user to which the comment belongs</summary>
        public global::StrawberryShake.EntityId? User { get; init; }
    }

    ///<summary>Represents replacement link to replace value of comment with.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial record ReplacementLinkEntity
    {
        public ReplacementLinkEntity(global::System.String? keyword = default !, global::System.String? hyperlink = default !)
        {
            Keyword = keyword;
            Hyperlink = hyperlink;
        }

        ///<summary>Represents the keyword for searching hyperlinks in comment text.</summary>
        public global::System.String? Keyword { get; init; }

        ///<summary>Represents the hyperlink that will wrap the keyword when a keyword match is found in comment text.</summary>
        public global::System.String? Hyperlink { get; init; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetUsersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.GetUsersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.UserEntity, GetUsers_User_User> _getUsers_User_UserFromUserEntityMapper;
        public GetUsersResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.UserEntity, GetUsers_User_User> getUsers_User_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getUsers_User_UserFromUserEntityMapper = getUsers_User_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getUsers_User_UserFromUserEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Vantage.Web.IGetUsersResult);
        public GetUsersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetUsersResultInfo info)
            {
                return new GetUsersResult(MapIGetUsers_UserArray(info.User, snapshot));
            }

            throw new global::System.ArgumentException("GetUsersResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Vantage.Web.IGetUsers_User?>? MapIGetUsers_UserArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var users = new global::System.Collections.Generic.List<global::Vantage.Web.IGetUsers_User?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                users.Add(MapIGetUsers_User(child, snapshot));
            }

            return users;
        }

        private global::Vantage.Web.IGetUsers_User? MapIGetUsers_User(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getUsers_User_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::Vantage.Web.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetUsersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetUsersResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? user, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            User = user;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? User { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetUsersResultInfo(User, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetUsers_User_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.UserEntity, GetUsers_User_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetUsers_User_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetUsers_User_User Map(global::Vantage.Web.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetUsers_User_User(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetCommentsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.GetCommentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.CommentEntity, GetComments_Comment_Comment> _getComments_Comment_CommentFromCommentEntityMapper;
        public GetCommentsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.CommentEntity, GetComments_Comment_Comment> getComments_Comment_CommentFromCommentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getComments_Comment_CommentFromCommentEntityMapper = getComments_Comment_CommentFromCommentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getComments_Comment_CommentFromCommentEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Vantage.Web.IGetCommentsResult);
        public GetCommentsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetCommentsResultInfo info)
            {
                return new GetCommentsResult(MapIGetComments_CommentArray(info.Comment, snapshot));
            }

            throw new global::System.ArgumentException("GetCommentsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Vantage.Web.IGetComments_Comment?>? MapIGetComments_CommentArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var comments = new global::System.Collections.Generic.List<global::Vantage.Web.IGetComments_Comment?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                comments.Add(MapIGetComments_Comment(child, snapshot));
            }

            return comments;
        }

        private global::Vantage.Web.IGetComments_Comment? MapIGetComments_Comment(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Comment", global::System.StringComparison.Ordinal))
            {
                return _getComments_Comment_CommentFromCommentEntityMapper.Map(snapshot.GetEntity<global::Vantage.Web.State.CommentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetCommentsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetCommentsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? comment, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Comment = comment;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Comment { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetCommentsResultInfo(Comment, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetComments_Comment_CommentFromCommentEntityMapper : global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.CommentEntity, GetComments_Comment_Comment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.UserEntity, GetComments_Comment_User_User> _getComments_Comment_User_UserFromUserEntityMapper;
        public GetComments_Comment_CommentFromCommentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.UserEntity, GetComments_Comment_User_User> getComments_Comment_User_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getComments_Comment_User_UserFromUserEntityMapper = getComments_Comment_User_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getComments_Comment_User_UserFromUserEntityMapper));
        }

        public GetComments_Comment_Comment Map(global::Vantage.Web.State.CommentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetComments_Comment_Comment(entity.Id, entity.UserId, entity.Content, entity.DateCreated, MapIGetComments_Comment_User(entity.User, snapshot));
        }

        private global::Vantage.Web.IGetComments_Comment_User? MapIGetComments_Comment_User(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getComments_Comment_User_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::Vantage.Web.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetComments_Comment_User_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.UserEntity, GetComments_Comment_User_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetComments_Comment_User_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetComments_Comment_User_User Map(global::Vantage.Web.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetComments_Comment_User_User(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SendMessageResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.SendMessageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.CommentEntity, SendMessage_AddComment_Comment_Comment> _sendMessage_AddComment_Comment_CommentFromCommentEntityMapper;
        public SendMessageResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.CommentEntity, SendMessage_AddComment_Comment_Comment> sendMessage_AddComment_Comment_CommentFromCommentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _sendMessage_AddComment_Comment_CommentFromCommentEntityMapper = sendMessage_AddComment_Comment_CommentFromCommentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(sendMessage_AddComment_Comment_CommentFromCommentEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Vantage.Web.ISendMessageResult);
        public SendMessageResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is SendMessageResultInfo info)
            {
                return new SendMessageResult(MapISendMessage_AddComment(info.AddComment, snapshot));
            }

            throw new global::System.ArgumentException("SendMessageResultInfo expected.");
        }

        private global::Vantage.Web.ISendMessage_AddComment? MapISendMessage_AddComment(global::Vantage.Web.State.AddCommentPayloadData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ISendMessage_AddComment returnValue = default !;
            if (data?.__typename.Equals("AddCommentPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new SendMessage_AddComment_AddCommentPayload(MapISendMessage_AddComment_Comment(data.Comment, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Vantage.Web.ISendMessage_AddComment_Comment? MapISendMessage_AddComment_Comment(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Comment", global::System.StringComparison.Ordinal))
            {
                return _sendMessage_AddComment_Comment_CommentFromCommentEntityMapper.Map(snapshot.GetEntity<global::Vantage.Web.State.CommentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SendMessageResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public SendMessageResultInfo(global::Vantage.Web.State.AddCommentPayloadData? addComment, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddComment = addComment;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Vantage.Web.State.AddCommentPayloadData? AddComment { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new SendMessageResultInfo(AddComment, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SendMessage_AddComment_Comment_CommentFromCommentEntityMapper : global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.CommentEntity, SendMessage_AddComment_Comment_Comment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public SendMessage_AddComment_Comment_CommentFromCommentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public SendMessage_AddComment_Comment_Comment Map(global::Vantage.Web.State.CommentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new SendMessage_AddComment_Comment_Comment(entity.Content);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnAddedCommentResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.OnAddedCommentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.CommentEntity, OnAddedComment_Created_Comment> _onAddedComment_Created_CommentFromCommentEntityMapper;
        public OnAddedCommentResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.CommentEntity, OnAddedComment_Created_Comment> onAddedComment_Created_CommentFromCommentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _onAddedComment_Created_CommentFromCommentEntityMapper = onAddedComment_Created_CommentFromCommentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(onAddedComment_Created_CommentFromCommentEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Vantage.Web.IOnAddedCommentResult);
        public OnAddedCommentResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is OnAddedCommentResultInfo info)
            {
                return new OnAddedCommentResult(MapIOnAddedComment_Created(info.Created, snapshot));
            }

            throw new global::System.ArgumentException("OnAddedCommentResultInfo expected.");
        }

        private global::Vantage.Web.IOnAddedComment_Created? MapIOnAddedComment_Created(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Comment", global::System.StringComparison.Ordinal))
            {
                return _onAddedComment_Created_CommentFromCommentEntityMapper.Map(snapshot.GetEntity<global::Vantage.Web.State.CommentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnAddedCommentResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public OnAddedCommentResultInfo(global::StrawberryShake.EntityId? created, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Created = created;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? Created { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new OnAddedCommentResultInfo(Created, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnAddedComment_Created_CommentFromCommentEntityMapper : global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.CommentEntity, OnAddedComment_Created_Comment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.UserEntity, OnAddedComment_Created_User_User> _onAddedComment_Created_User_UserFromUserEntityMapper;
        public OnAddedComment_Created_CommentFromCommentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.UserEntity, OnAddedComment_Created_User_User> onAddedComment_Created_User_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _onAddedComment_Created_User_UserFromUserEntityMapper = onAddedComment_Created_User_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(onAddedComment_Created_User_UserFromUserEntityMapper));
        }

        public OnAddedComment_Created_Comment Map(global::Vantage.Web.State.CommentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new OnAddedComment_Created_Comment(entity.Id, entity.UserId, entity.Content, entity.DateCreated, MapIOnAddedComment_Created_User(entity.User, snapshot));
        }

        private global::Vantage.Web.IOnAddedComment_Created_User? MapIOnAddedComment_Created_User(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _onAddedComment_Created_User_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::Vantage.Web.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnAddedComment_Created_User_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.UserEntity, OnAddedComment_Created_User_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public OnAddedComment_Created_User_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public OnAddedComment_Created_User_User Map(global::Vantage.Web.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new OnAddedComment_Created_User_User(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetReplacementLinksResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.GetReplacementLinksResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, GetReplacementLinks_ReplacementLink_ReplacementLink> _getReplacementLinks_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper;
        public GetReplacementLinksResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, GetReplacementLinks_ReplacementLink_ReplacementLink> getReplacementLinks_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getReplacementLinks_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper = getReplacementLinks_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getReplacementLinks_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Vantage.Web.IGetReplacementLinksResult);
        public GetReplacementLinksResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetReplacementLinksResultInfo info)
            {
                return new GetReplacementLinksResult(MapIGetReplacementLinks_ReplacementLinkArray(info.ReplacementLink, snapshot));
            }

            throw new global::System.ArgumentException("GetReplacementLinksResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Vantage.Web.IGetReplacementLinks_ReplacementLink?>? MapIGetReplacementLinks_ReplacementLinkArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var replacementLinks = new global::System.Collections.Generic.List<global::Vantage.Web.IGetReplacementLinks_ReplacementLink?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                replacementLinks.Add(MapIGetReplacementLinks_ReplacementLink(child, snapshot));
            }

            return replacementLinks;
        }

        private global::Vantage.Web.IGetReplacementLinks_ReplacementLink? MapIGetReplacementLinks_ReplacementLink(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ReplacementLink", global::System.StringComparison.Ordinal))
            {
                return _getReplacementLinks_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper.Map(snapshot.GetEntity<global::Vantage.Web.State.ReplacementLinkEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetReplacementLinksResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetReplacementLinksResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? replacementLink, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ReplacementLink = replacementLink;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? ReplacementLink { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetReplacementLinksResultInfo(ReplacementLink, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetReplacementLinks_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper : global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, GetReplacementLinks_ReplacementLink_ReplacementLink>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetReplacementLinks_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetReplacementLinks_ReplacementLink_ReplacementLink Map(global::Vantage.Web.State.ReplacementLinkEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetReplacementLinks_ReplacementLink_ReplacementLink(entity.Keyword, entity.Hyperlink);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddReplacementResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.AddReplacementResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, AddReplacement_AddReplacementLink_ReplacementLink_ReplacementLink> _addReplacement_AddReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper;
        public AddReplacementResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, AddReplacement_AddReplacementLink_ReplacementLink_ReplacementLink> addReplacement_AddReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _addReplacement_AddReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper = addReplacement_AddReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper ?? throw new global::System.ArgumentNullException(nameof(addReplacement_AddReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Vantage.Web.IAddReplacementResult);
        public AddReplacementResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddReplacementResultInfo info)
            {
                return new AddReplacementResult(MapIAddReplacement_AddReplacementLink(info.AddReplacementLink, snapshot));
            }

            throw new global::System.ArgumentException("AddReplacementResultInfo expected.");
        }

        private global::Vantage.Web.IAddReplacement_AddReplacementLink? MapIAddReplacement_AddReplacementLink(global::Vantage.Web.State.ReplacementRecordsData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IAddReplacement_AddReplacementLink returnValue = default !;
            if (data?.__typename.Equals("ReplacementRecords", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new AddReplacement_AddReplacementLink_ReplacementRecords(MapIAddReplacement_AddReplacementLink_ReplacementLink(data.ReplacementLink, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Vantage.Web.IAddReplacement_AddReplacementLink_ReplacementLink? MapIAddReplacement_AddReplacementLink_ReplacementLink(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ReplacementLink", global::System.StringComparison.Ordinal))
            {
                return _addReplacement_AddReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper.Map(snapshot.GetEntity<global::Vantage.Web.State.ReplacementLinkEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddReplacementResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddReplacementResultInfo(global::Vantage.Web.State.ReplacementRecordsData? addReplacementLink, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddReplacementLink = addReplacementLink;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Vantage.Web.State.ReplacementRecordsData? AddReplacementLink { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddReplacementResultInfo(AddReplacementLink, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddReplacement_AddReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper : global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, AddReplacement_AddReplacementLink_ReplacementLink_ReplacementLink>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddReplacement_AddReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public AddReplacement_AddReplacementLink_ReplacementLink_ReplacementLink Map(global::Vantage.Web.State.ReplacementLinkEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new AddReplacement_AddReplacementLink_ReplacementLink_ReplacementLink(entity.Keyword, entity.Hyperlink);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class RemoveReplacementLinkResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.RemoveReplacementLinkResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, RemoveReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLink> _removeReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper;
        public RemoveReplacementLinkResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, RemoveReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLink> removeReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _removeReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper = removeReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper ?? throw new global::System.ArgumentNullException(nameof(removeReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Vantage.Web.IRemoveReplacementLinkResult);
        public RemoveReplacementLinkResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is RemoveReplacementLinkResultInfo info)
            {
                return new RemoveReplacementLinkResult(MapIRemoveReplacementLink_RemoveReplacementLink(info.RemoveReplacementLink, snapshot));
            }

            throw new global::System.ArgumentException("RemoveReplacementLinkResultInfo expected.");
        }

        private global::Vantage.Web.IRemoveReplacementLink_RemoveReplacementLink? MapIRemoveReplacementLink_RemoveReplacementLink(global::Vantage.Web.State.RemoveReplacementLinkPayloadData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IRemoveReplacementLink_RemoveReplacementLink returnValue = default !;
            if (data?.__typename.Equals("RemoveReplacementLinkPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new RemoveReplacementLink_RemoveReplacementLink_RemoveReplacementLinkPayload(MapIRemoveReplacementLink_RemoveReplacementLink_ReplacementLink(data.ReplacementLink, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Vantage.Web.IRemoveReplacementLink_RemoveReplacementLink_ReplacementLink? MapIRemoveReplacementLink_RemoveReplacementLink_ReplacementLink(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ReplacementLink", global::System.StringComparison.Ordinal))
            {
                return _removeReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper.Map(snapshot.GetEntity<global::Vantage.Web.State.ReplacementLinkEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class RemoveReplacementLinkResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public RemoveReplacementLinkResultInfo(global::Vantage.Web.State.RemoveReplacementLinkPayloadData? removeReplacementLink, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            RemoveReplacementLink = removeReplacementLink;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Vantage.Web.State.RemoveReplacementLinkPayloadData? RemoveReplacementLink { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new RemoveReplacementLinkResultInfo(RemoveReplacementLink, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class RemoveReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper : global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, RemoveReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLink>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public RemoveReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLinkFromReplacementLinkEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public RemoveReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLink Map(global::Vantage.Web.State.ReplacementLinkEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new RemoveReplacementLink_RemoveReplacementLink_ReplacementLink_ReplacementLink(entity.Keyword, entity.Hyperlink);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnReplacementLinkCreatedResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.OnReplacementLinkCreatedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, OnReplacementLinkCreated_Created_ReplacementLink> _onReplacementLinkCreated_Created_ReplacementLinkFromReplacementLinkEntityMapper;
        public OnReplacementLinkCreatedResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, OnReplacementLinkCreated_Created_ReplacementLink> onReplacementLinkCreated_Created_ReplacementLinkFromReplacementLinkEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _onReplacementLinkCreated_Created_ReplacementLinkFromReplacementLinkEntityMapper = onReplacementLinkCreated_Created_ReplacementLinkFromReplacementLinkEntityMapper ?? throw new global::System.ArgumentNullException(nameof(onReplacementLinkCreated_Created_ReplacementLinkFromReplacementLinkEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Vantage.Web.IOnReplacementLinkCreatedResult);
        public OnReplacementLinkCreatedResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is OnReplacementLinkCreatedResultInfo info)
            {
                return new OnReplacementLinkCreatedResult(MapIOnReplacementLinkCreated_Created(info.Created, snapshot));
            }

            throw new global::System.ArgumentException("OnReplacementLinkCreatedResultInfo expected.");
        }

        private global::Vantage.Web.IOnReplacementLinkCreated_Created? MapIOnReplacementLinkCreated_Created(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ReplacementLink", global::System.StringComparison.Ordinal))
            {
                return _onReplacementLinkCreated_Created_ReplacementLinkFromReplacementLinkEntityMapper.Map(snapshot.GetEntity<global::Vantage.Web.State.ReplacementLinkEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnReplacementLinkCreatedResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public OnReplacementLinkCreatedResultInfo(global::StrawberryShake.EntityId? created, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Created = created;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? Created { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new OnReplacementLinkCreatedResultInfo(Created, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnReplacementLinkCreated_Created_ReplacementLinkFromReplacementLinkEntityMapper : global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, OnReplacementLinkCreated_Created_ReplacementLink>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public OnReplacementLinkCreated_Created_ReplacementLinkFromReplacementLinkEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public OnReplacementLinkCreated_Created_ReplacementLink Map(global::Vantage.Web.State.ReplacementLinkEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new OnReplacementLinkCreated_Created_ReplacementLink(entity.Keyword, entity.Hyperlink);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnReplacementLinkRemovedResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.OnReplacementLinkRemovedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, OnReplacementLinkRemoved_Removed_ReplacementLink> _onReplacementLinkRemoved_Removed_ReplacementLinkFromReplacementLinkEntityMapper;
        public OnReplacementLinkRemovedResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, OnReplacementLinkRemoved_Removed_ReplacementLink> onReplacementLinkRemoved_Removed_ReplacementLinkFromReplacementLinkEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _onReplacementLinkRemoved_Removed_ReplacementLinkFromReplacementLinkEntityMapper = onReplacementLinkRemoved_Removed_ReplacementLinkFromReplacementLinkEntityMapper ?? throw new global::System.ArgumentNullException(nameof(onReplacementLinkRemoved_Removed_ReplacementLinkFromReplacementLinkEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Vantage.Web.IOnReplacementLinkRemovedResult);
        public OnReplacementLinkRemovedResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is OnReplacementLinkRemovedResultInfo info)
            {
                return new OnReplacementLinkRemovedResult(MapIOnReplacementLinkRemoved_Removed(info.Removed, snapshot));
            }

            throw new global::System.ArgumentException("OnReplacementLinkRemovedResultInfo expected.");
        }

        private global::Vantage.Web.IOnReplacementLinkRemoved_Removed? MapIOnReplacementLinkRemoved_Removed(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ReplacementLink", global::System.StringComparison.Ordinal))
            {
                return _onReplacementLinkRemoved_Removed_ReplacementLinkFromReplacementLinkEntityMapper.Map(snapshot.GetEntity<global::Vantage.Web.State.ReplacementLinkEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnReplacementLinkRemovedResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public OnReplacementLinkRemovedResultInfo(global::StrawberryShake.EntityId? removed, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Removed = removed;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? Removed { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new OnReplacementLinkRemovedResultInfo(Removed, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnReplacementLinkRemoved_Removed_ReplacementLinkFromReplacementLinkEntityMapper : global::StrawberryShake.IEntityMapper<global::Vantage.Web.State.ReplacementLinkEntity, OnReplacementLinkRemoved_Removed_ReplacementLink>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public OnReplacementLinkRemoved_Removed_ReplacementLinkFromReplacementLinkEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public OnReplacementLinkRemoved_Removed_ReplacementLink Map(global::Vantage.Web.State.ReplacementLinkEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new OnReplacementLinkRemoved_Removed_ReplacementLink(entity.Keyword, entity.Hyperlink);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetUsersBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IGetUsersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IGetUsersResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetUsersBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IGetUsersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetUsersResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetUsersResult Result, GetUsersResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetUsersResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetUsersResult, GetUsersResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? userId = default !;
            _entityStore.Update(session =>
            {
                userId = UpdateIGetUsers_UserEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetUsersResultInfo(userId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetUsers_UserEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var users = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                users.Add(UpdateIGetUsers_UserEntity(session, child, entityIds));
            }

            return users;
        }

        private global::StrawberryShake.EntityId? UpdateIGetUsers_UserEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Vantage.Web.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.UserEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.UserEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetCommentsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IGetCommentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IGetCommentsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetCommentsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IGetCommentsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetCommentsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetCommentsResult Result, GetCommentsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetCommentsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetCommentsResult, GetCommentsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? commentId = default !;
            _entityStore.Update(session =>
            {
                commentId = UpdateIGetComments_CommentEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "comment"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetCommentsResultInfo(commentId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetComments_CommentEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var comments = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                comments.Add(UpdateIGetComments_CommentEntity(session, child, entityIds));
            }

            return comments;
        }

        private global::StrawberryShake.EntityId? UpdateIGetComments_CommentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Comment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Vantage.Web.State.CommentEntity? entity))
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.CommentEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateCreated")), UpdateIGetComments_Comment_UserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.CommentEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateCreated")), UpdateIGetComments_Comment_UserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId? UpdateIGetComments_Comment_UserEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Vantage.Web.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.UserEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.UserEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SendMessageBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.ISendMessageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.ISendMessageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public SendMessageBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.ISendMessageResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<ISendMessageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ISendMessageResult Result, SendMessageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ISendMessageResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ISendMessageResult, SendMessageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Vantage.Web.State.AddCommentPayloadData? addCommentId = default !;
            _entityStore.Update(session =>
            {
                addCommentId = DeserializeISendMessage_AddComment(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addComment"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new SendMessageResultInfo(addCommentId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Vantage.Web.State.AddCommentPayloadData? DeserializeISendMessage_AddComment(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddCommentPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Vantage.Web.State.AddCommentPayloadData(typename, comment: UpdateISendMessage_AddComment_CommentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "comment"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateISendMessage_AddComment_CommentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Comment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Vantage.Web.State.CommentEntity? entity))
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.CommentEntity(entity.Id, entity.UserId, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), entity.DateCreated, entity.User));
                }
                else
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.CommentEntity(default !, default !, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnAddedCommentBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IOnAddedCommentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IOnAddedCommentResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public OnAddedCommentBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IOnAddedCommentResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IOnAddedCommentResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IOnAddedCommentResult Result, OnAddedCommentResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IOnAddedCommentResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IOnAddedCommentResult, OnAddedCommentResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? createdId = default !;
            _entityStore.Update(session =>
            {
                createdId = UpdateIOnAddedComment_CreatedEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new OnAddedCommentResultInfo(createdId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIOnAddedComment_CreatedEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Comment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Vantage.Web.State.CommentEntity? entity))
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.CommentEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateCreated")), UpdateIOnAddedComment_Created_UserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.CommentEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "content")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dateCreated")), UpdateIOnAddedComment_Created_UserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "user"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId? UpdateIOnAddedComment_Created_UserEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Vantage.Web.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.UserEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.UserEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetReplacementLinksBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IGetReplacementLinksResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IGetReplacementLinksResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetReplacementLinksBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IGetReplacementLinksResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetReplacementLinksResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetReplacementLinksResult Result, GetReplacementLinksResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetReplacementLinksResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetReplacementLinksResult, GetReplacementLinksResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? replacementLinkId = default !;
            _entityStore.Update(session =>
            {
                replacementLinkId = UpdateIGetReplacementLinks_ReplacementLinkEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "replacementLink"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetReplacementLinksResultInfo(replacementLinkId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetReplacementLinks_ReplacementLinkEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var replacementLinks = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                replacementLinks.Add(UpdateIGetReplacementLinks_ReplacementLinkEntity(session, child, entityIds));
            }

            return replacementLinks;
        }

        private global::StrawberryShake.EntityId? UpdateIGetReplacementLinks_ReplacementLinkEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ReplacementLink", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Vantage.Web.State.ReplacementLinkEntity? entity))
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.ReplacementLinkEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "keyword")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hyperlink"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.ReplacementLinkEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "keyword")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hyperlink"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AddReplacementBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IAddReplacementResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IAddReplacementResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public AddReplacementBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IAddReplacementResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddReplacementResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddReplacementResult Result, AddReplacementResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IAddReplacementResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddReplacementResult, AddReplacementResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Vantage.Web.State.ReplacementRecordsData? addReplacementLinkId = default !;
            _entityStore.Update(session =>
            {
                addReplacementLinkId = DeserializeIAddReplacement_AddReplacementLink(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addReplacementLink"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddReplacementResultInfo(addReplacementLinkId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Vantage.Web.State.ReplacementRecordsData? DeserializeIAddReplacement_AddReplacementLink(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ReplacementRecords", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Vantage.Web.State.ReplacementRecordsData(typename, replacementLink: UpdateIAddReplacement_AddReplacementLink_ReplacementLinkEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "replacementLink"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIAddReplacement_AddReplacementLink_ReplacementLinkEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ReplacementLink", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Vantage.Web.State.ReplacementLinkEntity? entity))
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.ReplacementLinkEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "keyword")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hyperlink"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.ReplacementLinkEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "keyword")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hyperlink"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class RemoveReplacementLinkBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IRemoveReplacementLinkResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IRemoveReplacementLinkResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public RemoveReplacementLinkBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IRemoveReplacementLinkResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IRemoveReplacementLinkResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IRemoveReplacementLinkResult Result, RemoveReplacementLinkResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IRemoveReplacementLinkResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IRemoveReplacementLinkResult, RemoveReplacementLinkResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Vantage.Web.State.RemoveReplacementLinkPayloadData? removeReplacementLinkId = default !;
            _entityStore.Update(session =>
            {
                removeReplacementLinkId = DeserializeIRemoveReplacementLink_RemoveReplacementLink(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "removeReplacementLink"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new RemoveReplacementLinkResultInfo(removeReplacementLinkId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Vantage.Web.State.RemoveReplacementLinkPayloadData? DeserializeIRemoveReplacementLink_RemoveReplacementLink(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("RemoveReplacementLinkPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Vantage.Web.State.RemoveReplacementLinkPayloadData(typename, replacementLink: UpdateIRemoveReplacementLink_RemoveReplacementLink_ReplacementLinkEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "replacementLink"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIRemoveReplacementLink_RemoveReplacementLink_ReplacementLinkEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ReplacementLink", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Vantage.Web.State.ReplacementLinkEntity? entity))
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.ReplacementLinkEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "keyword")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hyperlink"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.ReplacementLinkEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "keyword")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hyperlink"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnReplacementLinkCreatedBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IOnReplacementLinkCreatedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IOnReplacementLinkCreatedResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public OnReplacementLinkCreatedBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IOnReplacementLinkCreatedResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IOnReplacementLinkCreatedResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IOnReplacementLinkCreatedResult Result, OnReplacementLinkCreatedResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IOnReplacementLinkCreatedResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IOnReplacementLinkCreatedResult, OnReplacementLinkCreatedResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? createdId = default !;
            _entityStore.Update(session =>
            {
                createdId = UpdateIOnReplacementLinkCreated_CreatedEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "created"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new OnReplacementLinkCreatedResultInfo(createdId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIOnReplacementLinkCreated_CreatedEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ReplacementLink", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Vantage.Web.State.ReplacementLinkEntity? entity))
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.ReplacementLinkEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "keyword")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hyperlink"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.ReplacementLinkEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "keyword")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hyperlink"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnReplacementLinkRemovedBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Vantage.Web.IOnReplacementLinkRemovedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IOnReplacementLinkRemovedResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public OnReplacementLinkRemovedBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Vantage.Web.IOnReplacementLinkRemovedResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IOnReplacementLinkRemovedResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IOnReplacementLinkRemovedResult Result, OnReplacementLinkRemovedResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IOnReplacementLinkRemovedResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IOnReplacementLinkRemovedResult, OnReplacementLinkRemovedResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? removedId = default !;
            _entityStore.Update(session =>
            {
                removedId = UpdateIOnReplacementLinkRemoved_RemovedEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "removed"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new OnReplacementLinkRemovedResultInfo(removedId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIOnReplacementLinkRemoved_RemovedEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ReplacementLink", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Vantage.Web.State.ReplacementLinkEntity? entity))
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.ReplacementLinkEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "keyword")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hyperlink"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Vantage.Web.State.ReplacementLinkEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "keyword")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hyperlink"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial record AddCommentPayloadData
    {
        public AddCommentPayloadData(global::System.String __typename, global::StrawberryShake.EntityId? comment = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Comment = comment;
        }

        public global::System.String __typename { get; init; }

        public global::StrawberryShake.EntityId? Comment { get; init; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial record ReplacementRecordsData
    {
        public ReplacementRecordsData(global::System.String __typename, global::StrawberryShake.EntityId? replacementLink = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ReplacementLink = replacementLink;
        }

        public global::System.String __typename { get; init; }

        public global::StrawberryShake.EntityId? ReplacementLink { get; init; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial record RemoveReplacementLinkPayloadData
    {
        public RemoveReplacementLinkPayloadData(global::System.String __typename, global::StrawberryShake.EntityId? replacementLink = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ReplacementLink = replacementLink;
        }

        public global::System.String __typename { get; init; }

        public global::StrawberryShake.EntityId? ReplacementLink { get; init; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class ChatClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
            "User" => ParseUserEntityId(obj, __typename), "Comment" => ParseCommentEntityId(obj, __typename), "ReplacementLink" => ParseReplacementLinkEntityId(obj, __typename), _ => throw new global::System.NotSupportedException()}

            ;
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
            "User" => FormatUserEntityId(entityId), "Comment" => FormatCommentEntityId(entityId), "ReplacementLink" => FormatReplacementLinkEntityId(entityId), _ => throw new global::System.NotSupportedException()}

            ;
        }

        private global::StrawberryShake.EntityId ParseUserEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatUserEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCommentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatCommentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseReplacementLinkEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatReplacementLinkEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class ChatClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public ChatClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
